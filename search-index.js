var searchIndex = JSON.parse('{\
"gejmboj":{"doc":"","t":"F","n":["main"],"q":[[0,"gejmboj"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"gejmboj_cpu":{"doc":"","t":"AAOAAAADDMMLLLLLLLLLLLLLLLLLLLENNNNLLLLLLLLLLLLNNNNENEGNNNNNNNAAALLLLAFLLLLLLLLLLLAAALALLLLLLNNENNLLLLLLLLLLLNNNNNNENNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLNENNLLFLLLLLLLLLNNENNNNNNNNNLLLLLLLLLLLNNNENNLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNELLLLLLLLLLLNNNNNENNLLLLLLLLLLLNNNNNNNNENNNNLLFLLLLLLLLLDLLLLLLLLLLLLLLNNNNNNNENNNNNRRRRMDMNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["cpu","errors","instruction_group","instructions","macros","memory","registers","CPU","CpuFlags","IME","IME_scheduled","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","from","from","into","into","new","new","tick","try_from","try_from","try_into","try_into","type_id","type_id","CpuError","Error","SingleRegisterParseError","UnknownInstruction","UnsupportedSingleRegister","borrow","borrow_mut","eq","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id","ALU16Bit","ALU8Bit","Bit","Carry","Condition","ControlFlow","Instruction","InstructionResult","Load16Bit","Load8Bit","Misc","NoCarry","NotZero","RotateShift","Zero","alu_16bit","alu_8bit","bit","borrow","borrow","borrow_mut","borrow_mut","control_flow","decode","eq","eq","execute","fmt","fmt","from","from","into","into","is_fulfilled","length","load_16bit","load_8bit","misc","parse","rotate_shift","try_from","try_from","try_into","try_into","type_id","type_id","ADD_HL","ADD_SP","ALU16Bit","DEC","INC","borrow","borrow_mut","eq","execute","fmt","from","into","length","try_from","try_into","type_id","ADC","ADC_HL","ADC_N","ADD","ADD_HL","ADD_N","ALU8Bit","AND","AND_HL","AND_N","CP","CP_HL","CP_N","DEC","DEC_HL","INC","INC_HL","OR","OR_HL","OR_N","SBC","SBC_HL","SBC_N","SUB","SUB_HL","SUB_N","XOR","XOR_HL","XOR_N","borrow","borrow_mut","eq","execute","fmt","from","into","length","try_from","try_into","type_id","BIT","Bit","RES","SET","borrow","borrow_mut","decode","eq","execute","fmt","from","into","length","try_from","try_into","type_id","CALL","CALLC","ControlFlow","JP","JPC","JP_HL","JR","JRC","RET","RETC","RETI","RST","borrow","borrow_mut","eq","execute","fmt","from","into","length","try_from","try_into","type_id","LD","LD_FROM_SP","LD_HL_TO_SP","Load16Bit","POP","PUSH","borrow","borrow_mut","eq","execute","fmt","from","into","length","try_from","try_into","type_id","LD","LDH_C_FROM_A","LDH_C_TO_A","LDH_FROM_A","LDH_TO_A","LD_A_FROM_HL_DEC","LD_A_FROM_HL_INC","LD_A_TO_BC","LD_A_TO_DE","LD_A_TO_HL_DEC","LD_A_TO_HL_INC","LD_BC_TO_A","LD_DE_TO_A","LD_FROM_A","LD_FROM_HL","LD_N","LD_N_TO_HL","LD_TO_A","LD_TO_HL","Load8Bit","borrow","borrow_mut","eq","execute","fmt","from","into","length","try_from","try_into","type_id","CCF","CPL","DAA","DI","EI","Misc","NOP","SCF","borrow","borrow_mut","eq","execute","fmt","from","into","length","try_from","try_into","type_id","RL","RLA","RLC","RLCA","RR","RRA","RRC","RRCA","RotateShift","SLA","SRA","SRL","SWAP","borrow","borrow_mut","decode","eq","execute","fmt","from","into","length","try_from","try_into","type_id","Memory","borrow","borrow_mut","fmt","from","get","get_u16","into","new","set","set_u16","to_string","try_from","try_into","type_id","A","AF","B","BC","C","D","DE","DoubleRegister","E","F","H","HL","L","MASK_FLAG_CARRY","MASK_FLAG_HALF_CARRY","MASK_FLAG_NEGATIVE","MASK_FLAG_ZERO","PC","Registers","SP","SP","SingleRegister","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decrement_sp","eq","eq","fmt","fmt","fmt","from","from","from","from","from","get_double","get_flags","get_single","increment_sp","into","into","into","is_carry","is_half_carry","is_negative","is_zero","new","set_carry","set_double","set_flags","set_half_carry","set_negative","set_single","set_zero","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"gejmboj_cpu"],[7,"gejmboj_cpu::cpu"],[30,"gejmboj_cpu::errors"],[47,"gejmboj_cpu::instructions"],[93,"gejmboj_cpu::instructions::alu_16bit"],[109,"gejmboj_cpu::instructions::alu_8bit"],[149,"gejmboj_cpu::instructions::bit"],[165,"gejmboj_cpu::instructions::control_flow"],[188,"gejmboj_cpu::instructions::load_16bit"],[205,"gejmboj_cpu::instructions::load_8bit"],[236,"gejmboj_cpu::instructions::misc"],[255,"gejmboj_cpu::instructions::rotate_shift"],[280,"gejmboj_cpu::memory"],[295,"gejmboj_cpu::registers"]],"d":["Sharp SM83 CPU implementation","Gejmboj CPU related errors","Macro to define a group of instructions","Sharp SM83 instruction set","Macros used within this crate","Memory implementation","Sharp SM83 register","","","Interrupt Master Enable","If true at the start of a machine cycle IME should be …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Return either the number of consumed machine cycles, or a …","","","","","","","","","","","","","","","","Decode an operation code into an <code>Instruction</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Add contents of <code>DoubleRegister</code> to <code>HL</code>","Add contents of <code>u8</code> operand to <code>SP</code>","16-bit ALU instructions","Decrement contents of <code>DoubleRegister</code> by 1.","Increment contents of <code>DoubleRegister</code> by 1.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Add value of <code>SingleRegister</code> and the Carry flag to <code>A</code>","Add value of <code>(HL)</code> and Carry to <code>A</code>","Add value of <code>operand</code> and Carry to <code>A</code>","Add value of <code>SingleRegister</code> to <code>A</code>","Add value of <code>(HL)</code> to <code>A</code>","Add value of <code>operand</code> to <code>A</code>","8-bit ALU (math) instructions","Logical AND between register and <code>A</code>","Logical AND between <code>(HL)</code> and <code>A</code>","Logical AND between <code>operand</code> and <code>A</code>","Compare register and <code>A</code>","Compare <code>(HL)</code> and <code>A</code>","Compare <code>operand</code> and <code>A</code>","Decrement <code>SingleRegister</code> by 1","Decrement <code>HL</code> by 1","Increment <code>SingleRegister</code> by 1","Increment <code>HL</code> by 1","Logical OR between register and <code>A</code>","Logical OR between <code>(HL)</code> and <code>A</code>","Logical OR between <code>operand</code> and <code>A</code>","Subtract value of <code>SingleRegister</code> and Carry from A","Subtract value of <code>(HL)</code> and Carry from A","Subtract value of <code>operand</code> and Carry from A","Subtract value of <code>SingleRegister</code> from A","Subtract value of <code>(HL)</code> from A","Subtract value of <code>operand</code> from A","Logical XOR between register and <code>A</code>","Logical XOR between <code>(HL)</code> and <code>A</code>","Logical XOR between <code>operand</code> and <code>A</code>","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Copies the complement of the contents of the specified bit …","Bit operations","Resets the specified bit to 0 in <code>m</code>.","Sets the specified bit to 1 in <code>m</code>.","","","Decodes the <code>operand</code> into a <code>Bit</code> instruction.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Unconditional call of the function at operand address.","Conditional function call.","Program control flow instructions","Unconditional jump to location specified by 16-bit operand.","Conditional jump to location specified by 16-bit operand.","Unconditional jump to location specified by register HL","Unconditional jump to location at current + offset (-129 …","Conditional jump to relative address specified by offset …","Unconditional return from function.","Conditionally return from function.","Unconditional return from a function which enables …","Unconditional function call to the RESET address defined …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Loads 16-bit data into 16-bit register","Loads value from SP into address","Loads data from HL into SP","16-bit load instructions.","Pop data from stack memory to 16-bit register","Push data from 16-bit register to stack memory","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Loads data from register <code>r2</code> into <code>r1</code>.","Load data from A into the address at <code>0xFF00</code> + register C","Load data to A from the address at <code>0xFF00</code> + register C","Load data from A into the address at <code>0xFF00</code> + <code>operand</code>","Load data to A from the address at <code>0xFF00</code> + <code>operand</code>","Load data to A from the address at HL, value at HL is …","Load data to A from the address at HL, value at HL is …","Load A into into address pointed to by BC","Load A into into address pointed to by DE","Load data to address at HL from A, HL is decremented after …","Load data to address at HL from A, HL is incremented after …","Load data at address pointed to by BC into A","Load data at address pointed to by DE into A","Load data in A into address at <code>address</code>","Loads data pointed to by HL into <code>r</code>.","Loads <code>operand</code> into register <code>r</code>.","Load the value of <code>operand</code> into the location pointed to by …","Load data at <code>address</code> into A","Loads data in <code>r</code> into location pointed to by HL.","8 Bit load instructions.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Flips the carry flag (C) and clears the negative (N) and …","Flips all bits in the A register and sets the negative (N) …","Decimal Adjust Accumulator (DAA)","Disable interrupt handling","Schedules interrupt handling to be enabled after the next …","Miscelleneous instructions","No operation","Sets the carry flag (C) and clears the negative (N) and …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Rotates contents of <code>m</code> to the left.","Rotates contents of register A to the left. C is put in A0 …","Rotates contents of <code>m</code> to the left.","Rotate contents of register A to the left. Bit 7 is placed …","Rotates contents of <code>m</code> to the right.","Rotates contents of register A to the right. C is put in A7…","Rotates contents of <code>m</code> to the right.","Rotate contents of register A to the right. Bit 0 is …","Bit rotate and shift instructions.","Shifts the contents of <code>m</code> to the left.","Shifts the contents of <code>m</code> to the right.","Shifts the contents of <code>m</code> to the right.","Swaps the high and low nibble of <code>m</code>.","","","Decodes the <code>operand</code> into a <code>RotateShift</code> instruction.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Gets a <code>u8</code> value from memory.","Gets a <code>u16</code> value from memory.","Calls <code>U::from(self)</code>.","","Sets a <code>u8</code> value in memory.","Sets a <code>u16</code> value in memory.","","","","","","","","","","","","Represents a 16-bit general purpose register.","","","","","","","","","","","","","","Represents an 8-bit general purpose register.","","","","","","","","","Decrements the SP by 2 and returns new SP value.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets value from a double 16-bit register","Returns the value of the flag register <code>F</code>.","Gets the current value of a <code>SingleRegister</code>.","Increments the SP by 2 and returns new SP value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the carry flag is set.","Returns <code>true</code> if the half carry flag is set.","Returns <code>true</code> if the negative flag is set.","Returns <code>true</code> if the zero flag is set.","","Convenience function to set or reset the carry flag.","Sets value of a double 16-bit register","Sets the value of the flag register <code>F</code>.","Convenience function to set or reset the half-carry flag.","Convenience function to set or reset the negative flag.","Sets the value of a <code>SingleRegister</code>.","Convenience function to set or reset the zero flag.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,5,1,5,1,1,1,5,1,5,1,5,1,5,5,1,5,1,5,1,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,15,15,15,16,0,15,0,0,15,15,15,16,16,15,16,0,0,0,15,16,15,16,0,0,15,16,15,15,16,15,16,15,16,16,15,0,0,0,16,0,15,16,15,16,15,16,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,0,20,20,20,20,0,20,20,20,20,20,20,20,20,20,21,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,0,25,25,25,25,25,25,0,25,25,25,25,25,25,25,25,25,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,28,29,28,29,28,28,29,0,28,28,28,29,28,0,0,0,0,6,0,6,29,0,6,28,29,6,28,29,28,28,6,28,29,6,28,29,6,28,28,29,29,6,6,6,6,6,28,29,6,6,6,6,6,6,6,6,6,6,6,6,28,6,6,28,28,29,6,28,29,6,28,29],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[1,1],2],[[1,3],4],[[]],[[]],[[]],[[]],[[],5],[[],1],[[5,6,7],[[9,[8]]]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,0,[[]],[[]],[[8,8],2],[[8,3],4],[[8,3],4],[[]],[[]],[11],[[],12],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[13,14,7],[[9,[15,8]]]],[[15,15],2],[[16,16],2],[[15,6,7,1],17],[[15,3],4],[[16,3],4],[[]],[[]],[[]],[[]],[[16,6],2],[15,14],0,0,0,[[13,13],[[9,[16,8]]]],0,[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,0,[[]],[[]],[[18,18],2],[[18,6,7,1],17],[[18,3],4],[[]],[[]],[18,14],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[19,19],2],[[19,6,7,1],17],[[19,3],4],[[]],[[]],[19,14],[[],9],[[],9],[[],10],0,0,0,0,[[]],[[]],[13,[[9,[20,8]]]],[[20,20],2],[[20,6,7,1],17],[[20,3],4],[[]],[[]],[20,14],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[21,21],2],[[21,6,7,1],17],[[21,3],4],[[]],[[]],[21,14],[[],9],[[],9],[[],10],0,0,0,0,0,0,[[]],[[]],[[22,22],2],[[22,6,7,1],17],[[22,3],4],[[]],[[]],[22,14],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[23,23],2],[[23,6,7,1],17],[[23,3],4],[[]],[[]],[23,14],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,[[]],[[]],[[24,24],2],[[24,6,7,1],17],[[24,3],4],[[]],[[]],[24,14],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[13,[[9,[25,8]]]],[[25,25],2],[[25,6,7,1],17],[[25,3],4],[[]],[[]],[25,14],[[],9],[[],9],[[],10],0,[[]],[[]],[[7,3],[[9,[26]]]],[[]],[[7,27],13],[[7,27],14],[[]],[[],7],[[7,27,13]],[[7,27,14]],[[],12],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[28,28],[[]],[6,14],[[28,28],2],[[29,29],2],[[6,3],4],[[28,3],4],[[29,3],4],[[]],[[]],[[],28],[[],29],[[]],[[6,29],14],[6,13],[[6,28],13],[6,14],[[]],[[]],[[]],[6,2],[6,2],[6,2],[6,2],[[],6],[[6,2]],[[6,29,14]],[[6,13]],[[6,2]],[[6,2]],[[6,28,13]],[[6,2]],[[]],[[],12],[[],9],[[],9],[13,[[9,[28]]]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10]],"c":[],"p":[[3,"CpuFlags"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"CPU"],[3,"Registers"],[3,"Memory"],[4,"CpuError"],[4,"Result"],[3,"TypeId"],[3,"Demand"],[3,"String"],[15,"u8"],[15,"u16"],[4,"Instruction"],[4,"Condition"],[6,"InstructionResult"],[4,"ALU16Bit"],[4,"ALU8Bit"],[4,"Bit"],[4,"ControlFlow"],[4,"Load16Bit"],[4,"Load8Bit"],[4,"Misc"],[4,"RotateShift"],[3,"Error"],[15,"usize"],[4,"SingleRegister"],[4,"DoubleRegister"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
