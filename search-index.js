var searchIndex = JSON.parse('{\
"gejmboj":{"doc":"","t":[5],"n":["main"],"q":["gejmboj"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"gejmboj_cpu":{"doc":"","t":[0,0,14,0,0,0,0,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,11,11,11,11,11,11,11,11,11,11,12,12,13,4,13,4,6,13,13,13,13,13,13,11,11,11,11,0,5,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,12,12,12,12,13,13,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,4,13,13,13,13,13,12,3,12,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cpu","errors","instruction_group","instructions","macros","memory","registers","CPU","CpuFlags","IME","IME_scheduled","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","from","from","into","into","ne","new","new","tick","try_from","try_from","try_into","try_into","type_id","type_id","CpuError","Error","UnknownInstruction","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","0","0","Carry","Condition","ControlFlow","Instruction","InstructionResult","Load16Bit","Load8Bit","Misc","NoCarry","NotZero","Zero","borrow","borrow","borrow_mut","borrow_mut","control_flow","decode","eq","eq","execute","fmt","fmt","from","from","into","into","is_fulfilled","length","load_16bit","load_8bit","misc","ne","parse","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","Call","CallIf","ControlFlow","Jp","JpIf","JpToHL","JpToOffset","JpToOffsetIf","Ret","RetI","RetIf","Rst","borrow","borrow_mut","eq","execute","fmt","from","into","length","ne","try_from","try_into","type_id","0","0","0","0","0","0","0","0","1","1","1","Ld","LdFromSP","LdHLToSP","Load16Bit","Pop","Push","borrow","borrow_mut","eq","execute","fmt","from","into","length","ne","try_from","try_into","type_id","0","0","0","0","1","Ld","LdAFromHLDec","LdAFromHLInc","LdAToBC","LdAToDE","LdAToHLDec","LdAToHLInc","LdBCToA","LdByte","LdByteToHL","LdDEToA","LdFromA","LdFromHL","LdToA","LdToHL","LdhAToC","LdhCToA","LdhFromA","LdhToA","Load8Bit","borrow","borrow_mut","eq","execute","fmt","from","into","length","ne","try_from","try_into","type_id","0","0","0","0","0","0","0","0","0","1","1","CCF","CPL","DAA","DI","EI","Misc","Noop","SCF","borrow","borrow_mut","eq","execute","fmt","from","into","length","try_from","try_into","type_id","Memory","borrow","borrow_mut","fmt","from","get","get_u16","into","new","set","set_u16","to_string","try_from","try_into","type_id","A","AF","B","BC","C","D","DE","DoubleRegister","E","F","H","HL","L","PC","Registers","SP","SP","SingleRegister","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decrement_sp","eq","eq","fmt","fmt","fmt","from","from","from","from","from","get_double","get_single","increment_sp","into","into","into","is_carry","is_half_carry","is_negative","is_zero","new","set_double","set_single","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["gejmboj_cpu","","","","","","","gejmboj_cpu::cpu","","","","","","","","","","","","","","","","","","","","","","","","gejmboj_cpu::errors","","","","","","","","","","","","","gejmboj_cpu::errors::CpuError","","gejmboj_cpu::instructions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gejmboj_cpu::instructions::Instruction","","","","gejmboj_cpu::instructions::control_flow","","","","","","","","","","","","","","","","","","","","","","","","gejmboj_cpu::instructions::control_flow::ControlFlow","","","","","","","","","","","gejmboj_cpu::instructions::load_16bit","","","","","","","","","","","","","","","","","","gejmboj_cpu::instructions::load_16bit::Load16Bit","","","","","gejmboj_cpu::instructions::load_8bit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gejmboj_cpu::instructions::load_8bit::Load8Bit","","","","","","","","","","","gejmboj_cpu::instructions::misc","","","","","","","","","","","","","","","","","","","gejmboj_cpu::memory","","","","","","","","","","","","","","","gejmboj_cpu::registers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Sharp SM83 CPU implementation","Gejmboj CPU related errors","Macro to define a group of instructions","Sharp SM83 instruction set","Macros used within this crate","Memory implementation","Sharp SM83 register","","","Interrupt Master Enable","If true at the start of a machine cycle IME should be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return either the number of consumed machine cycles, or a …","","","","","","","","","","","","Decode an operation code into an <code>Instruction</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Unconditional call of the function at operand address.","Conditional function call.","Program control flow instructions","Unconditional jump to location specified by 16-bit operand.","Conditional jump to location specified by 16-bit operand.","Unconditional jump to location specified by register HL","Unconditional jump to location at current + offset","Conditional jump to relative address specified by offset …","Unconditional return from function.","Unconditional return from a function which enables …","Conditionally return from function.","Unconditional function call to the RESET address defined …","","","","","","","","","","","","","","","","","","","","","","","","Loads 16-bit data into 16-bit register","Loads value from SP into address","Loads data from HL into SP","16-bit load instructions.","Pop data from stack memory to 16-bit register","Push data from 16-bit register to stack memory","","","","","","","","","","","","","","","","","","Loads data from register <code>r2</code> into <code>r1</code>.","Load data to A from the address at HL, value at HL is …","Load data to A from the address at HL, value at HL is …","Load A into into address pointed to by BC","Load A into into address pointed to by DE","Load data to address at HL from A, HL is decremented after …","Load data to address at HL from A, HL is incremented after …","Load data at address pointed to by BC into A","Loads <code>operand</code> into register <code>r</code>.","Load the value of <code>operand</code> into the location pointed to by …","Load data at address pointed to by DE into A","Load data in A into address at <code>address</code>","Loads data pointed to by HL into <code>r</code>.","Load data at <code>address</code> into A","Loads data in <code>r</code> into location pointed to by HL.","Load data from A into the address at <code>0xFF00</code> + register C","Load data to A from the address at <code>0xFF00</code> + register C","Load data from A into the address at <code>0xFF00</code> + <code>operand</code>","Load data to A from the address at <code>0xFF00</code> + <code>operand</code>","8 Bit load instructions.","","","","","","","","","","","","","","","","","","","","","","","","Flips the carry flag (C) and clears the negative (N) and …","Flips all bits in the A register and sets the negative (N) …","Flips the zero (Z) and carry (C) flags and clears the …","Disable interrupt handling","Schedules interrupt handling to be enabled after the next …","Miscelleneous instructions","No operation","Sets the carry flag (C) and clears the negative (N) and …","","","","","","","","","","","","","","","","","Gets a <code>u8</code> value from memory.","Gets a <code>u16</code> value from memory.","","","Sets a <code>u8</code> value in memory.","Sets a <code>u16</code> value in memory.","","","","","","","","","","","","Represents a 16-bit general purpose register.","","","","","","","","","","Represents an 8-bit general purpose register.","","","","","","","","","Decrements the SP by 2 and returns new SP value.","","","","","","","","","","","Gets value from a double 16-bit register","Gets the current value of a <code>SingleRegister</code>.","Increments the SP by 2 and returns new SP value.","","","","Returns <code>true</code> if the carry flag is set.","Returns <code>true</code> if the half carry flag is set.","Returns <code>true</code> if the negative flag is set.","Returns <code>true</code> if the zero flag is set.","","Sets value of a double 16-bit register","Sets the value of a <code>SingleRegister</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,2,1,2,1,1,1,2,1,2,1,1,2,1,2,2,1,2,1,2,1,0,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,0,7,0,0,7,7,7,6,6,6,7,6,7,6,0,0,7,6,7,7,6,7,6,7,6,6,7,0,0,0,7,6,7,6,7,6,7,6,8,9,10,11,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,14,15,16,17,18,19,20,14,16,18,21,21,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,23,24,25,22,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,27,30,36,36,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,39,38,39,38,38,39,0,38,38,38,39,38,40,0,40,39,0,40,38,39,40,38,39,38,38,40,38,39,40,38,39,40,38,38,39,39,40,40,40,40,38,39,40,40,40,40,40,40,40,38,40,40,38,39,40,38,39,40,38,39],"f":[null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["cpuflags",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["cpuflags",3]],["bool",15]],[[]],[[]],[[["registers",3],["memory",3]],[["result",4,["cpuerror"]],["cpuerror",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[["u16",15],["u8",15],["memory",3]],[["result",4,["instruction","cpuerror"]],["cpuerror",4],["instruction",4]]],[[["instruction",4]],["bool",15]],[[["condition",4]],["bool",15]],[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["registers",3]],["bool",15]],[[],["u16",15]],null,null,null,[[["instruction",4]],["bool",15]],[[["u8",15]],[["result",4,["cpuerror"]],["cpuerror",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["controlflow",4]],["bool",15]],[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u16",15]],[[["controlflow",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["load16bit",4]],["bool",15]],[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u16",15]],[[["load16bit",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["load8bit",4]],["bool",15]],[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u16",15]],[[["load8bit",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["misc",4]],["bool",15]],[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u16",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[["usize",15]],["u8",15]],[[["usize",15]],["u16",15]],[[]],[[]],[[["usize",15],["u8",15]]],[[["usize",15],["u16",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["singleregister",4]],[[]],[[],["u16",15]],[[["singleregister",4]],["bool",15]],[[["doubleregister",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["doubleregister",4]],["u16",15]],[[["singleregister",4]],["u8",15]],[[],["u16",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[["u16",15],["doubleregister",4]]],[[["u8",15],["singleregister",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"CpuFlags"],[3,"CPU"],[4,"CpuError"],[13,"Error"],[13,"UnknownInstruction"],[4,"Condition"],[4,"Instruction"],[13,"ControlFlow"],[13,"Load8Bit"],[13,"Load16Bit"],[13,"Misc"],[4,"ControlFlow"],[13,"Jp"],[13,"JpIf"],[13,"JpToOffset"],[13,"JpToOffsetIf"],[13,"Call"],[13,"CallIf"],[13,"RetIf"],[13,"Rst"],[4,"Load16Bit"],[13,"Ld"],[13,"LdFromSP"],[13,"Push"],[13,"Pop"],[4,"Load8Bit"],[13,"Ld"],[13,"LdFromHL"],[13,"LdToHL"],[13,"LdByte"],[13,"LdByteToHL"],[13,"LdToA"],[13,"LdFromA"],[13,"LdhToA"],[13,"LdhFromA"],[4,"Misc"],[3,"Memory"],[4,"SingleRegister"],[4,"DoubleRegister"],[3,"Registers"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};