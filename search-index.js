var searchIndex = JSON.parse('{\
"gejmboj":{"doc":"","i":[[5,"main","gejmboj","",null,[[]]]],"p":[]},\
"gejmboj_cpu":{"doc":"","i":[[0,"cpu","gejmboj_cpu","Sharp SM83 CPU implementation",null,null],[3,"CpuFlags","gejmboj_cpu::cpu","",null,null],[12,"IME","","",0,null],[3,"CPU","","",null,null],[11,"new","","",0,[[]]],[11,"new","","",1,[[]]],[11,"tick","","",1,[[["memory",3],["registers",3]],[["result",4],["cpuerror",4]]]],[0,"errors","gejmboj_cpu","Gejmboj CPU related errors",null,null],[4,"CpuError","gejmboj_cpu::errors","",null,null],[13,"Error","","",2,null],[13,"UnknownInstruction","","",2,null],[0,"instructions","gejmboj_cpu","Sharp SM83 instruction set",null,null],[4,"Instruction","gejmboj_cpu::instructions","",null,null],[13,"ControlFlow","","",3,null],[13,"Load8Bit","","",3,null],[13,"Misc","","",3,null],[4,"Condition","","",null,null],[13,"Carry","","",4,null],[13,"NoCarry","","",4,null],[13,"Zero","","",4,null],[13,"NotZero","","",4,null],[5,"decode","","Decode an operation code into an `Instruction`.",null,[[["memory",3]],[["instruction",4],["cpuerror",4],["result",4]]]],[6,"InstructionResult","","Return either the number of consumed machine cycles, or aâ€¦",null,null],[11,"execute","","",3,[[["memory",3],["registers",3],["cpuflags",3]],["instructionresult",6]]],[11,"length","","",3,[[]]],[11,"parse","","",4,[[],[["result",4],["cpuerror",4]]]],[11,"is_fulfilled","","",4,[[["registers",3]]]],[0,"macros","gejmboj_cpu","Macros used within this crate",null,null],[0,"memory","","Memory implementation",null,null],[3,"Memory","gejmboj_cpu::memory","",null,null],[11,"new","","",5,[[]]],[11,"set","","Sets a `u8` value in memory.",5,[[]]],[11,"get","","Gets a `u8` value from memory.",5,[[]]],[11,"get_u16","","Gets a `u16` value from memory.",5,[[]]],[11,"set_u16","","Sets a `u16` value in memory.",5,[[]]],[0,"registers","gejmboj_cpu","Sharp SM83 register",null,null],[3,"Registers","gejmboj_cpu::registers","",null,null],[12,"PC","","",6,null],[12,"SP","","",6,null],[4,"SingleRegister","","Represents an 8-bit general purpose register.",null,null],[13,"A","","",7,null],[13,"B","","",7,null],[13,"C","","",7,null],[13,"D","","",7,null],[13,"E","","",7,null],[13,"F","","",7,null],[13,"H","","",7,null],[13,"L","","",7,null],[4,"DoubleRegister","","Represents a 16-bit general purpose register.",null,null],[13,"AF","","",8,null],[13,"BC","","",8,null],[13,"DE","","",8,null],[13,"HL","","",8,null],[11,"new","","",6,[[]]],[11,"set_single","","Sets the value of a `SingleRegister`.",6,[[["singleregister",4]]]],[11,"get_single","","Gets the current value of a `SingleRegister`.",6,[[["singleregister",4]]]],[11,"get_double","","Gets value from a double 16-bit register",6,[[["doubleregister",4]]]],[11,"set_double","","Sets value of a double 16-bit register",6,[[["doubleregister",4]]]],[11,"is_carry","","Returns `true` if the carry flag is set.",6,[[]]],[11,"is_half_carry","","Returns `true` if the half carry flag is set.",6,[[]]],[11,"is_negative","","Returns `true` if the negative flag is set.",6,[[]]],[11,"is_zero","","Returns `true` if the zero flag is set.",6,[[]]],[14,"instruction_group","gejmboj_cpu","Macro to define a group of instructions",null,null],[11,"from","gejmboj_cpu::cpu","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","gejmboj_cpu::errors","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","gejmboj_cpu::instructions","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","gejmboj_cpu::memory","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","gejmboj_cpu::registers","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"clone","","",7,[[],["singleregister",4]]],[11,"fmt","gejmboj_cpu::errors","",2,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::instructions","",4,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::registers","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::errors","",2,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::memory","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","gejmboj_cpu::registers","",6,[[["formatter",3]],["result",6]]]],"p":[[3,"CpuFlags"],[3,"CPU"],[4,"CpuError"],[4,"Instruction"],[4,"Condition"],[3,"Memory"],[3,"Registers"],[4,"SingleRegister"],[4,"DoubleRegister"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);