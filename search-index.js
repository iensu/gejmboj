var searchIndex = JSON.parse('{\
"gejmboj":{"doc":"","i":[[5,"main","gejmboj","",null,[[]]]],"p":[]},\
"gejmboj_cpu":{"doc":"","i":[[0,"cpu","gejmboj_cpu","Sharp SM83 CPU implementation",null,null],[3,"CpuFlags","gejmboj_cpu::cpu","",null,null],[12,"IME","","",0,null],[11,"new","","",0,[[]]],[3,"CPU","","",null,null],[11,"new","","",1,[[]]],[11,"tick","","",1,[[["registers",3],["memory",3]],[["cpuerror",4],["result",4]]]],[0,"errors","gejmboj_cpu","Gejmboj CPU related errors",null,null],[4,"CpuError","gejmboj_cpu::errors","",null,null],[13,"Error","","",2,null],[13,"UnknownInstruction","","",2,null],[0,"instructions","gejmboj_cpu","Sharp SM83 instruction set",null,null],[0,"control_flow","gejmboj_cpu::instructions","",null,null],[4,"ControlFlow","gejmboj_cpu::instructions::control_flow","Program control flow instructions",null,null],[13,"Jp","","Unconditional jump to location specified by 16-bit …",3,null],[13,"JpIf","","Conditional jump to location specified by 16-bit operand.",3,null],[13,"JpToHL","","Unconditional jump to location specified by register HL",3,null],[13,"JpToOffset","","Unconditional jump to location at current + offset",3,null],[13,"JpToOffsetIf","","Conditional jump to relative address specified by offset …",3,null],[13,"Call","","Unconditional call of the function at operand address.",3,null],[13,"CallIf","","Conditional function call.",3,null],[13,"Ret","","Unconditional return from function.",3,null],[13,"RetIf","","Conditionally return from function.",3,null],[13,"RetI","","Unconditional return from a function which enables …",3,null],[13,"Rst","","Unconditional function call to the RESET address defined …",3,null],[11,"execute","","",3,[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]]],[11,"length","","",3,[[],["u16",15]]],[0,"load_8bit","gejmboj_cpu::instructions","",null,null],[4,"Load8Bit","gejmboj_cpu::instructions::load_8bit","8 Bit load instructions.",null,null],[13,"Ld","","Loads data from register <code>r2</code> into <code>r1</code>.",4,null],[13,"LdFromHL","","Loads data pointed to by HL into <code>r</code>.",4,null],[13,"LdToHL","","Loads data in <code>r</code> into location pointed to by HL.",4,null],[13,"LdByte","","Loads <code>operand</code> into register <code>r</code>.",4,null],[13,"LdByteToHL","","Load the value of <code>operand</code> into the location pointed to by …",4,null],[13,"LdBCToA","","Load data at address pointed to by BC into A",4,null],[13,"LdDEToA","","Load data at address pointed to by DE into A",4,null],[13,"LdAToBC","","Load A into into address pointed to by BC",4,null],[13,"LdAToDE","","Load A into into address pointed to by DE",4,null],[13,"LdToA","","Load data at <code>address</code> into A",4,null],[13,"LdFromA","","Load data in A into address at <code>address</code>",4,null],[13,"LdhCToA","","Load data to A from the address at <code>0xFF00</code> + register C",4,null],[13,"LdhAToC","","Load data from A into the address at <code>0xFF00</code> + register C",4,null],[13,"LdhToA","","Load data to A from the address at <code>0xFF00</code> + <code>operand</code>",4,null],[13,"LdhFromA","","Load data from A into the address at <code>0xFF00</code> + <code>operand</code>",4,null],[13,"LdAFromHLDec","","Load data to A from the address at HL, value at HL is …",4,null],[13,"LdAToHLDec","","Load data to address at HL from A, HL is decremented …",4,null],[13,"LdAFromHLInc","","Load data to A from the address at HL, value at HL is …",4,null],[13,"LdAToHLInc","","Load data to address at HL from A, HL is incremented …",4,null],[11,"execute","","",4,[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]]],[11,"length","","",4,[[],["u16",15]]],[0,"misc","gejmboj_cpu::instructions","",null,null],[4,"Misc","gejmboj_cpu::instructions::misc","Miscelleneous instructions",null,null],[13,"Noop","","No operation",5,null],[11,"execute","","",5,[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]]],[11,"length","","",5,[[],["u16",15]]],[6,"InstructionResult","gejmboj_cpu::instructions","Return either the number of consumed machine cycles, or a …",null,null],[4,"Instruction","","",null,null],[13,"ControlFlow","","",6,null],[13,"Load8Bit","","",6,null],[13,"Misc","","",6,null],[11,"execute","","",6,[[["cpuflags",3],["registers",3],["memory",3]],["instructionresult",6]]],[11,"length","","",6,[[],["u16",15]]],[4,"Condition","","",null,null],[13,"Carry","","",7,null],[13,"NoCarry","","",7,null],[13,"Zero","","",7,null],[13,"NotZero","","",7,null],[11,"parse","","",7,[[["u8",15]],[["cpuerror",4],["result",4]]]],[11,"is_fulfilled","","",7,[[["registers",3]],["bool",15]]],[5,"decode","","Decode an operation code into an <code>Instruction</code>.",null,[[["memory",3],["u16",15],["u8",15]],[["result",4],["cpuerror",4],["instruction",4]]]],[0,"macros","gejmboj_cpu","Macros used within this crate",null,null],[0,"memory","","Memory implementationMemory data is stored in …",null,null],[3,"Memory","gejmboj_cpu::memory","",null,null],[11,"new","","",8,[[]]],[11,"set","","Sets a <code>u8</code> value in memory.",8,[[["usize",15],["u8",15]]]],[11,"get","","Gets a <code>u8</code> value from memory.",8,[[["usize",15]],["u8",15]]],[11,"get_u16","","Gets a <code>u16</code> value from memory.",8,[[["usize",15]],["u16",15]]],[11,"set_u16","","Sets a <code>u16</code> value in memory.",8,[[["usize",15],["u16",15]]]],[0,"registers","gejmboj_cpu","Sharp SM83 register16-bit special purpose registers<code>PC</code> …",null,null],[3,"Registers","gejmboj_cpu::registers","",null,null],[12,"PC","","",9,null],[12,"SP","","",9,null],[11,"new","","",9,[[]]],[11,"set_single","","Sets the value of a <code>SingleRegister</code>.",9,[[["singleregister",4],["u8",15]]]],[11,"get_single","","Gets the current value of a <code>SingleRegister</code>.",9,[[["singleregister",4]],["u8",15]]],[11,"get_double","","Gets value from a double 16-bit register",9,[[["doubleregister",4]],["u16",15]]],[11,"set_double","","Sets value of a double 16-bit register",9,[[["doubleregister",4],["u16",15]]]],[11,"is_carry","","Returns <code>true</code> if the carry flag is set.",9,[[],["bool",15]]],[11,"is_half_carry","","Returns <code>true</code> if the half carry flag is set.",9,[[],["bool",15]]],[11,"is_negative","","Returns <code>true</code> if the negative flag is set.",9,[[],["bool",15]]],[11,"is_zero","","Returns <code>true</code> if the zero flag is set.",9,[[],["bool",15]]],[4,"SingleRegister","","Represents an 8-bit general purpose register.",null,null],[13,"A","","",10,null],[13,"B","","",10,null],[13,"C","","",10,null],[13,"D","","",10,null],[13,"E","","",10,null],[13,"F","","",10,null],[13,"H","","",10,null],[13,"L","","",10,null],[4,"DoubleRegister","","Represents a 16-bit general purpose register.",null,null],[13,"AF","","",11,null],[13,"BC","","",11,null],[13,"DE","","",11,null],[13,"HL","","",11,null],[14,"instruction_group","gejmboj_cpu","Macro to define a group of instructions",null,null],[11,"from","gejmboj_cpu::cpu","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","gejmboj_cpu::errors","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","gejmboj_cpu::instructions::control_flow","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","gejmboj_cpu::instructions::load_8bit","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","gejmboj_cpu::instructions::misc","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","gejmboj_cpu::instructions","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","gejmboj_cpu::memory","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","gejmboj_cpu::registers","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"clone","","",10,[[],["singleregister",4]]],[11,"fmt","gejmboj_cpu::errors","",2,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::instructions::control_flow","",3,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::instructions::load_8bit","",4,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::instructions::misc","",5,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::instructions","",7,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::registers","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::errors","",2,[[["formatter",3]],["result",6]]],[11,"fmt","gejmboj_cpu::memory","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","gejmboj_cpu::registers","",9,[[["formatter",3]],["result",6]]]],"p":[[3,"CpuFlags"],[3,"CPU"],[4,"CpuError"],[4,"ControlFlow"],[4,"Load8Bit"],[4,"Misc"],[4,"Instruction"],[4,"Condition"],[3,"Memory"],[3,"Registers"],[4,"SingleRegister"],[4,"DoubleRegister"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);